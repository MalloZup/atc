// This file was generated by counterfeiter
package dbngfakes

import (
	"sync"

	"github.com/concourse/atc"
	"github.com/concourse/atc/dbng"
)

type FakeContainerFactory struct {
	FindContainerByHandleStub        func(string) (dbng.CreatedContainer, bool, error)
	findContainerByHandleMutex       sync.RWMutex
	findContainerByHandleArgsForCall []struct {
		arg1 string
	}
	findContainerByHandleReturns struct {
		result1 dbng.CreatedContainer
		result2 bool
		result3 error
	}
	FindResourceCheckContainerStub        func(*dbng.Worker, *dbng.UsedResourceConfig) (dbng.CreatingContainer, dbng.CreatedContainer, error)
	findResourceCheckContainerMutex       sync.RWMutex
	findResourceCheckContainerArgsForCall []struct {
		arg1 *dbng.Worker
		arg2 *dbng.UsedResourceConfig
	}
	findResourceCheckContainerReturns struct {
		result1 dbng.CreatingContainer
		result2 dbng.CreatedContainer
		result3 error
	}
	CreateResourceCheckContainerStub        func(*dbng.Worker, *dbng.UsedResourceConfig) (dbng.CreatingContainer, error)
	createResourceCheckContainerMutex       sync.RWMutex
	createResourceCheckContainerArgsForCall []struct {
		arg1 *dbng.Worker
		arg2 *dbng.UsedResourceConfig
	}
	createResourceCheckContainerReturns struct {
		result1 dbng.CreatingContainer
		result2 error
	}
	FindResourceGetContainerStub        func(*dbng.Worker, *dbng.UsedResourceCache, string) (dbng.CreatingContainer, dbng.CreatedContainer, error)
	findResourceGetContainerMutex       sync.RWMutex
	findResourceGetContainerArgsForCall []struct {
		arg1 *dbng.Worker
		arg2 *dbng.UsedResourceCache
		arg3 string
	}
	findResourceGetContainerReturns struct {
		result1 dbng.CreatingContainer
		result2 dbng.CreatedContainer
		result3 error
	}
	CreateResourceGetContainerStub        func(*dbng.Worker, *dbng.UsedResourceCache, string) (dbng.CreatingContainer, error)
	createResourceGetContainerMutex       sync.RWMutex
	createResourceGetContainerArgsForCall []struct {
		arg1 *dbng.Worker
		arg2 *dbng.UsedResourceCache
		arg3 string
	}
	createResourceGetContainerReturns struct {
		result1 dbng.CreatingContainer
		result2 error
	}
	FindBuildContainerStub        func(*dbng.Worker, *dbng.Build, atc.PlanID, dbng.ContainerMetadata) (dbng.CreatingContainer, dbng.CreatedContainer, error)
	findBuildContainerMutex       sync.RWMutex
	findBuildContainerArgsForCall []struct {
		arg1 *dbng.Worker
		arg2 *dbng.Build
		arg3 atc.PlanID
		arg4 dbng.ContainerMetadata
	}
	findBuildContainerReturns struct {
		result1 dbng.CreatingContainer
		result2 dbng.CreatedContainer
		result3 error
	}
	CreateBuildContainerStub        func(*dbng.Worker, *dbng.Build, atc.PlanID, dbng.ContainerMetadata) (dbng.CreatingContainer, error)
	createBuildContainerMutex       sync.RWMutex
	createBuildContainerArgsForCall []struct {
		arg1 *dbng.Worker
		arg2 *dbng.Build
		arg3 atc.PlanID
		arg4 dbng.ContainerMetadata
	}
	createBuildContainerReturns struct {
		result1 dbng.CreatingContainer
		result2 error
	}
	FindContainersMarkedForDeletionStub        func() ([]dbng.DestroyingContainer, error)
	findContainersMarkedForDeletionMutex       sync.RWMutex
	findContainersMarkedForDeletionArgsForCall []struct{}
	findContainersMarkedForDeletionReturns     struct {
		result1 []dbng.DestroyingContainer
		result2 error
	}
	MarkContainersForDeletionStub        func() error
	markContainersForDeletionMutex       sync.RWMutex
	markContainersForDeletionArgsForCall []struct{}
	markContainersForDeletionReturns     struct {
		result1 error
	}
	FindHijackedContainersForDeletionStub        func() ([]dbng.CreatedContainer, error)
	findHijackedContainersForDeletionMutex       sync.RWMutex
	findHijackedContainersForDeletionArgsForCall []struct{}
	findHijackedContainersForDeletionReturns     struct {
		result1 []dbng.CreatedContainer
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeContainerFactory) FindContainerByHandle(arg1 string) (dbng.CreatedContainer, bool, error) {
	fake.findContainerByHandleMutex.Lock()
	fake.findContainerByHandleArgsForCall = append(fake.findContainerByHandleArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("FindContainerByHandle", []interface{}{arg1})
	fake.findContainerByHandleMutex.Unlock()
	if fake.FindContainerByHandleStub != nil {
		return fake.FindContainerByHandleStub(arg1)
	} else {
		return fake.findContainerByHandleReturns.result1, fake.findContainerByHandleReturns.result2, fake.findContainerByHandleReturns.result3
	}
}

func (fake *FakeContainerFactory) FindContainerByHandleCallCount() int {
	fake.findContainerByHandleMutex.RLock()
	defer fake.findContainerByHandleMutex.RUnlock()
	return len(fake.findContainerByHandleArgsForCall)
}

func (fake *FakeContainerFactory) FindContainerByHandleArgsForCall(i int) string {
	fake.findContainerByHandleMutex.RLock()
	defer fake.findContainerByHandleMutex.RUnlock()
	return fake.findContainerByHandleArgsForCall[i].arg1
}

func (fake *FakeContainerFactory) FindContainerByHandleReturns(result1 dbng.CreatedContainer, result2 bool, result3 error) {
	fake.FindContainerByHandleStub = nil
	fake.findContainerByHandleReturns = struct {
		result1 dbng.CreatedContainer
		result2 bool
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeContainerFactory) FindResourceCheckContainer(arg1 *dbng.Worker, arg2 *dbng.UsedResourceConfig) (dbng.CreatingContainer, dbng.CreatedContainer, error) {
	fake.findResourceCheckContainerMutex.Lock()
	fake.findResourceCheckContainerArgsForCall = append(fake.findResourceCheckContainerArgsForCall, struct {
		arg1 *dbng.Worker
		arg2 *dbng.UsedResourceConfig
	}{arg1, arg2})
	fake.recordInvocation("FindResourceCheckContainer", []interface{}{arg1, arg2})
	fake.findResourceCheckContainerMutex.Unlock()
	if fake.FindResourceCheckContainerStub != nil {
		return fake.FindResourceCheckContainerStub(arg1, arg2)
	} else {
		return fake.findResourceCheckContainerReturns.result1, fake.findResourceCheckContainerReturns.result2, fake.findResourceCheckContainerReturns.result3
	}
}

func (fake *FakeContainerFactory) FindResourceCheckContainerCallCount() int {
	fake.findResourceCheckContainerMutex.RLock()
	defer fake.findResourceCheckContainerMutex.RUnlock()
	return len(fake.findResourceCheckContainerArgsForCall)
}

func (fake *FakeContainerFactory) FindResourceCheckContainerArgsForCall(i int) (*dbng.Worker, *dbng.UsedResourceConfig) {
	fake.findResourceCheckContainerMutex.RLock()
	defer fake.findResourceCheckContainerMutex.RUnlock()
	return fake.findResourceCheckContainerArgsForCall[i].arg1, fake.findResourceCheckContainerArgsForCall[i].arg2
}

func (fake *FakeContainerFactory) FindResourceCheckContainerReturns(result1 dbng.CreatingContainer, result2 dbng.CreatedContainer, result3 error) {
	fake.FindResourceCheckContainerStub = nil
	fake.findResourceCheckContainerReturns = struct {
		result1 dbng.CreatingContainer
		result2 dbng.CreatedContainer
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeContainerFactory) CreateResourceCheckContainer(arg1 *dbng.Worker, arg2 *dbng.UsedResourceConfig) (dbng.CreatingContainer, error) {
	fake.createResourceCheckContainerMutex.Lock()
	fake.createResourceCheckContainerArgsForCall = append(fake.createResourceCheckContainerArgsForCall, struct {
		arg1 *dbng.Worker
		arg2 *dbng.UsedResourceConfig
	}{arg1, arg2})
	fake.recordInvocation("CreateResourceCheckContainer", []interface{}{arg1, arg2})
	fake.createResourceCheckContainerMutex.Unlock()
	if fake.CreateResourceCheckContainerStub != nil {
		return fake.CreateResourceCheckContainerStub(arg1, arg2)
	} else {
		return fake.createResourceCheckContainerReturns.result1, fake.createResourceCheckContainerReturns.result2
	}
}

func (fake *FakeContainerFactory) CreateResourceCheckContainerCallCount() int {
	fake.createResourceCheckContainerMutex.RLock()
	defer fake.createResourceCheckContainerMutex.RUnlock()
	return len(fake.createResourceCheckContainerArgsForCall)
}

func (fake *FakeContainerFactory) CreateResourceCheckContainerArgsForCall(i int) (*dbng.Worker, *dbng.UsedResourceConfig) {
	fake.createResourceCheckContainerMutex.RLock()
	defer fake.createResourceCheckContainerMutex.RUnlock()
	return fake.createResourceCheckContainerArgsForCall[i].arg1, fake.createResourceCheckContainerArgsForCall[i].arg2
}

func (fake *FakeContainerFactory) CreateResourceCheckContainerReturns(result1 dbng.CreatingContainer, result2 error) {
	fake.CreateResourceCheckContainerStub = nil
	fake.createResourceCheckContainerReturns = struct {
		result1 dbng.CreatingContainer
		result2 error
	}{result1, result2}
}

func (fake *FakeContainerFactory) FindResourceGetContainer(arg1 *dbng.Worker, arg2 *dbng.UsedResourceCache, arg3 string) (dbng.CreatingContainer, dbng.CreatedContainer, error) {
	fake.findResourceGetContainerMutex.Lock()
	fake.findResourceGetContainerArgsForCall = append(fake.findResourceGetContainerArgsForCall, struct {
		arg1 *dbng.Worker
		arg2 *dbng.UsedResourceCache
		arg3 string
	}{arg1, arg2, arg3})
	fake.recordInvocation("FindResourceGetContainer", []interface{}{arg1, arg2, arg3})
	fake.findResourceGetContainerMutex.Unlock()
	if fake.FindResourceGetContainerStub != nil {
		return fake.FindResourceGetContainerStub(arg1, arg2, arg3)
	} else {
		return fake.findResourceGetContainerReturns.result1, fake.findResourceGetContainerReturns.result2, fake.findResourceGetContainerReturns.result3
	}
}

func (fake *FakeContainerFactory) FindResourceGetContainerCallCount() int {
	fake.findResourceGetContainerMutex.RLock()
	defer fake.findResourceGetContainerMutex.RUnlock()
	return len(fake.findResourceGetContainerArgsForCall)
}

func (fake *FakeContainerFactory) FindResourceGetContainerArgsForCall(i int) (*dbng.Worker, *dbng.UsedResourceCache, string) {
	fake.findResourceGetContainerMutex.RLock()
	defer fake.findResourceGetContainerMutex.RUnlock()
	return fake.findResourceGetContainerArgsForCall[i].arg1, fake.findResourceGetContainerArgsForCall[i].arg2, fake.findResourceGetContainerArgsForCall[i].arg3
}

func (fake *FakeContainerFactory) FindResourceGetContainerReturns(result1 dbng.CreatingContainer, result2 dbng.CreatedContainer, result3 error) {
	fake.FindResourceGetContainerStub = nil
	fake.findResourceGetContainerReturns = struct {
		result1 dbng.CreatingContainer
		result2 dbng.CreatedContainer
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeContainerFactory) CreateResourceGetContainer(arg1 *dbng.Worker, arg2 *dbng.UsedResourceCache, arg3 string) (dbng.CreatingContainer, error) {
	fake.createResourceGetContainerMutex.Lock()
	fake.createResourceGetContainerArgsForCall = append(fake.createResourceGetContainerArgsForCall, struct {
		arg1 *dbng.Worker
		arg2 *dbng.UsedResourceCache
		arg3 string
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateResourceGetContainer", []interface{}{arg1, arg2, arg3})
	fake.createResourceGetContainerMutex.Unlock()
	if fake.CreateResourceGetContainerStub != nil {
		return fake.CreateResourceGetContainerStub(arg1, arg2, arg3)
	} else {
		return fake.createResourceGetContainerReturns.result1, fake.createResourceGetContainerReturns.result2
	}
}

func (fake *FakeContainerFactory) CreateResourceGetContainerCallCount() int {
	fake.createResourceGetContainerMutex.RLock()
	defer fake.createResourceGetContainerMutex.RUnlock()
	return len(fake.createResourceGetContainerArgsForCall)
}

func (fake *FakeContainerFactory) CreateResourceGetContainerArgsForCall(i int) (*dbng.Worker, *dbng.UsedResourceCache, string) {
	fake.createResourceGetContainerMutex.RLock()
	defer fake.createResourceGetContainerMutex.RUnlock()
	return fake.createResourceGetContainerArgsForCall[i].arg1, fake.createResourceGetContainerArgsForCall[i].arg2, fake.createResourceGetContainerArgsForCall[i].arg3
}

func (fake *FakeContainerFactory) CreateResourceGetContainerReturns(result1 dbng.CreatingContainer, result2 error) {
	fake.CreateResourceGetContainerStub = nil
	fake.createResourceGetContainerReturns = struct {
		result1 dbng.CreatingContainer
		result2 error
	}{result1, result2}
}

func (fake *FakeContainerFactory) FindBuildContainer(arg1 *dbng.Worker, arg2 *dbng.Build, arg3 atc.PlanID, arg4 dbng.ContainerMetadata) (dbng.CreatingContainer, dbng.CreatedContainer, error) {
	fake.findBuildContainerMutex.Lock()
	fake.findBuildContainerArgsForCall = append(fake.findBuildContainerArgsForCall, struct {
		arg1 *dbng.Worker
		arg2 *dbng.Build
		arg3 atc.PlanID
		arg4 dbng.ContainerMetadata
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("FindBuildContainer", []interface{}{arg1, arg2, arg3, arg4})
	fake.findBuildContainerMutex.Unlock()
	if fake.FindBuildContainerStub != nil {
		return fake.FindBuildContainerStub(arg1, arg2, arg3, arg4)
	} else {
		return fake.findBuildContainerReturns.result1, fake.findBuildContainerReturns.result2, fake.findBuildContainerReturns.result3
	}
}

func (fake *FakeContainerFactory) FindBuildContainerCallCount() int {
	fake.findBuildContainerMutex.RLock()
	defer fake.findBuildContainerMutex.RUnlock()
	return len(fake.findBuildContainerArgsForCall)
}

func (fake *FakeContainerFactory) FindBuildContainerArgsForCall(i int) (*dbng.Worker, *dbng.Build, atc.PlanID, dbng.ContainerMetadata) {
	fake.findBuildContainerMutex.RLock()
	defer fake.findBuildContainerMutex.RUnlock()
	return fake.findBuildContainerArgsForCall[i].arg1, fake.findBuildContainerArgsForCall[i].arg2, fake.findBuildContainerArgsForCall[i].arg3, fake.findBuildContainerArgsForCall[i].arg4
}

func (fake *FakeContainerFactory) FindBuildContainerReturns(result1 dbng.CreatingContainer, result2 dbng.CreatedContainer, result3 error) {
	fake.FindBuildContainerStub = nil
	fake.findBuildContainerReturns = struct {
		result1 dbng.CreatingContainer
		result2 dbng.CreatedContainer
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeContainerFactory) CreateBuildContainer(arg1 *dbng.Worker, arg2 *dbng.Build, arg3 atc.PlanID, arg4 dbng.ContainerMetadata) (dbng.CreatingContainer, error) {
	fake.createBuildContainerMutex.Lock()
	fake.createBuildContainerArgsForCall = append(fake.createBuildContainerArgsForCall, struct {
		arg1 *dbng.Worker
		arg2 *dbng.Build
		arg3 atc.PlanID
		arg4 dbng.ContainerMetadata
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("CreateBuildContainer", []interface{}{arg1, arg2, arg3, arg4})
	fake.createBuildContainerMutex.Unlock()
	if fake.CreateBuildContainerStub != nil {
		return fake.CreateBuildContainerStub(arg1, arg2, arg3, arg4)
	} else {
		return fake.createBuildContainerReturns.result1, fake.createBuildContainerReturns.result2
	}
}

func (fake *FakeContainerFactory) CreateBuildContainerCallCount() int {
	fake.createBuildContainerMutex.RLock()
	defer fake.createBuildContainerMutex.RUnlock()
	return len(fake.createBuildContainerArgsForCall)
}

func (fake *FakeContainerFactory) CreateBuildContainerArgsForCall(i int) (*dbng.Worker, *dbng.Build, atc.PlanID, dbng.ContainerMetadata) {
	fake.createBuildContainerMutex.RLock()
	defer fake.createBuildContainerMutex.RUnlock()
	return fake.createBuildContainerArgsForCall[i].arg1, fake.createBuildContainerArgsForCall[i].arg2, fake.createBuildContainerArgsForCall[i].arg3, fake.createBuildContainerArgsForCall[i].arg4
}

func (fake *FakeContainerFactory) CreateBuildContainerReturns(result1 dbng.CreatingContainer, result2 error) {
	fake.CreateBuildContainerStub = nil
	fake.createBuildContainerReturns = struct {
		result1 dbng.CreatingContainer
		result2 error
	}{result1, result2}
}

func (fake *FakeContainerFactory) FindContainersMarkedForDeletion() ([]dbng.DestroyingContainer, error) {
	fake.findContainersMarkedForDeletionMutex.Lock()
	fake.findContainersMarkedForDeletionArgsForCall = append(fake.findContainersMarkedForDeletionArgsForCall, struct{}{})
	fake.recordInvocation("FindContainersMarkedForDeletion", []interface{}{})
	fake.findContainersMarkedForDeletionMutex.Unlock()
	if fake.FindContainersMarkedForDeletionStub != nil {
		return fake.FindContainersMarkedForDeletionStub()
	} else {
		return fake.findContainersMarkedForDeletionReturns.result1, fake.findContainersMarkedForDeletionReturns.result2
	}
}

func (fake *FakeContainerFactory) FindContainersMarkedForDeletionCallCount() int {
	fake.findContainersMarkedForDeletionMutex.RLock()
	defer fake.findContainersMarkedForDeletionMutex.RUnlock()
	return len(fake.findContainersMarkedForDeletionArgsForCall)
}

func (fake *FakeContainerFactory) FindContainersMarkedForDeletionReturns(result1 []dbng.DestroyingContainer, result2 error) {
	fake.FindContainersMarkedForDeletionStub = nil
	fake.findContainersMarkedForDeletionReturns = struct {
		result1 []dbng.DestroyingContainer
		result2 error
	}{result1, result2}
}

func (fake *FakeContainerFactory) MarkContainersForDeletion() error {
	fake.markContainersForDeletionMutex.Lock()
	fake.markContainersForDeletionArgsForCall = append(fake.markContainersForDeletionArgsForCall, struct{}{})
	fake.recordInvocation("MarkContainersForDeletion", []interface{}{})
	fake.markContainersForDeletionMutex.Unlock()
	if fake.MarkContainersForDeletionStub != nil {
		return fake.MarkContainersForDeletionStub()
	} else {
		return fake.markContainersForDeletionReturns.result1
	}
}

func (fake *FakeContainerFactory) MarkContainersForDeletionCallCount() int {
	fake.markContainersForDeletionMutex.RLock()
	defer fake.markContainersForDeletionMutex.RUnlock()
	return len(fake.markContainersForDeletionArgsForCall)
}

func (fake *FakeContainerFactory) MarkContainersForDeletionReturns(result1 error) {
	fake.MarkContainersForDeletionStub = nil
	fake.markContainersForDeletionReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeContainerFactory) FindHijackedContainersForDeletion() ([]dbng.CreatedContainer, error) {
	fake.findHijackedContainersForDeletionMutex.Lock()
	fake.findHijackedContainersForDeletionArgsForCall = append(fake.findHijackedContainersForDeletionArgsForCall, struct{}{})
	fake.recordInvocation("FindHijackedContainersForDeletion", []interface{}{})
	fake.findHijackedContainersForDeletionMutex.Unlock()
	if fake.FindHijackedContainersForDeletionStub != nil {
		return fake.FindHijackedContainersForDeletionStub()
	} else {
		return fake.findHijackedContainersForDeletionReturns.result1, fake.findHijackedContainersForDeletionReturns.result2
	}
}

func (fake *FakeContainerFactory) FindHijackedContainersForDeletionCallCount() int {
	fake.findHijackedContainersForDeletionMutex.RLock()
	defer fake.findHijackedContainersForDeletionMutex.RUnlock()
	return len(fake.findHijackedContainersForDeletionArgsForCall)
}

func (fake *FakeContainerFactory) FindHijackedContainersForDeletionReturns(result1 []dbng.CreatedContainer, result2 error) {
	fake.FindHijackedContainersForDeletionStub = nil
	fake.findHijackedContainersForDeletionReturns = struct {
		result1 []dbng.CreatedContainer
		result2 error
	}{result1, result2}
}

func (fake *FakeContainerFactory) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.findContainerByHandleMutex.RLock()
	defer fake.findContainerByHandleMutex.RUnlock()
	fake.findResourceCheckContainerMutex.RLock()
	defer fake.findResourceCheckContainerMutex.RUnlock()
	fake.createResourceCheckContainerMutex.RLock()
	defer fake.createResourceCheckContainerMutex.RUnlock()
	fake.findResourceGetContainerMutex.RLock()
	defer fake.findResourceGetContainerMutex.RUnlock()
	fake.createResourceGetContainerMutex.RLock()
	defer fake.createResourceGetContainerMutex.RUnlock()
	fake.findBuildContainerMutex.RLock()
	defer fake.findBuildContainerMutex.RUnlock()
	fake.createBuildContainerMutex.RLock()
	defer fake.createBuildContainerMutex.RUnlock()
	fake.findContainersMarkedForDeletionMutex.RLock()
	defer fake.findContainersMarkedForDeletionMutex.RUnlock()
	fake.markContainersForDeletionMutex.RLock()
	defer fake.markContainersForDeletionMutex.RUnlock()
	fake.findHijackedContainersForDeletionMutex.RLock()
	defer fake.findHijackedContainersForDeletionMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeContainerFactory) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ dbng.ContainerFactory = new(FakeContainerFactory)
